/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Carousel {

    constructor(options) {
        this.duration = 0; //切换时长ms
        this.stay = 0; //停留时长ms
        this.container = null; //外部容器
        this.wrap = null; //需要轮播的对象
        this.dotsWrap = null; //锚点
        this.leftArrow = null; //左箭头
        this.rightArrow = null; //右箭头
        this.useTransition = false; //是否使用css3过度切换动画
        this.usePosition = false; //是否使用绝对定位切换动画
        this.enableTouch = true; //是否允许触摸滑动
        this.enableClick = true; //是否允许点击dot切换
        this.dotClassName = ''; //锚点类名
        this.activeClassName = ''; //激活的锚点类名
        this.multi = false; //一屏是否包含多个项目
        this.direct = 'right'; //轮播方向
        this.loopTimer = null; //自动轮播计时器
        this.transTimer = null; //动画过渡完成计时器,防止ios qq内置浏览器有时偶尔不触发transitionEnd的bug
        this.rAFTrackTimer = null; //跟踪transtion过渡计时器
        this.rAFPosTimer = null; //定位实现过渡动画计时器
        this.anicomplete = true; //动画播放完成
        this.carouselCount = 0; //当前移动位置
        this.maxCount; //轮播数量
        this.parentWidth = 0; //父容器宽度
        this.wrapWidth = 0; //轮播对象宽度
        this.prefixStyle = null; //css3前缀
        this.bannerClick = false; //是否点击了banner
        this.transEndTime = new Date().getTime(); //动画结束后的时间戳
        this.isWindowFocus = true; //窗口是否为激活状态
        this.init(options);
    }
    init(options) {
        var self = this;
        this.container = options.container;
        this.wrap = options.wrap;
        this.dotsWrap = options.dotsWrap;
        this.leftArrow = options.leftArrow;
        this.rightArrow = options.rightArrow;
        this.duration = options.duration || 1000;
        this.stay = options.stay || 3000;
        this.activeClassName = options.activeClassName || 'dot';
        this.dotClassName = options.dotClassName || 'active';
        this.multi = options.multi;
        options.enableTouch != undefined && (this.enableTouch = options.enableTouch);
        options.usePosition != undefined && (this.usePosition = options.usePosition);
        options.enableClick != undefined && (this.enableClick = options.enableClick);
        this.container.style.overflow = "hidden";
        this.wrap.style.whiteSpace = "nowrap";
        this.wrapWidth = this.wrap.scrollWidth;
        this.parentWidth = this.container.clientWidth;
        this.maxCount = Math.ceil(this.wrapWidth / this.parentWidth) - 1;

        this.initDefault();

        if (this.usePosition) {
            this.container.style.position = 'relative';
            this.wrap.style.position = 'absolute';
            this.wrap.style.left = '0';
            this.wrap.style.top = '0';
        }

        if (this.maxCount > 0) {
            this.createDots(this.maxCount + 1);
        } else {
            return;
        }

        if (this.useTransition) {
            this._addEvent(this.container, 'webkitTransitionEnd', function () {
                self.transEnd();
            });
            this._addEvent(this.container, 'transitionend', function () {
                self.transEnd();
            });
            this._addEvent(this.container, 'oTransitionEnd', function () {
                self.transEnd();
            });
            this._addEvent(this.container, 'MSTransitionEnd', function () {
                self.transEnd();
            });
        }

        if (this.enableTouch) {
            this.bindTouchEvent();
        }

        if (this.enableClick) {
            this.bindDotClickEvent();
        }

        this.bindArrowClickEvent();
        this.transEnd();

        //切屏后，js可能停止运行
        function onVisibilityChanged(event) {
            var hidden = event.target.hidden;
            if (hidden) {
                self.isWindowFocus = false;
            } else {
                self.isWindowFocus = true;
                self.transEnd();
            }
        }
        document.addEventListener("visibilitychange", onVisibilityChanged, false);
    }
    //初始化默认过渡方式
    initDefault() {
        this.prefixStyle = this._getPrefixStyle();
        if (!this.usePosition) {
            if (this.prefixStyle.transitionProperty && this.prefixStyle.transform) {
                this.useTransition = true;
            } else if (!this.prefixStyle.transform) {
                this.usePosition = true;
            }
        }
    }
    //创建锚点
    createDots(carouselCount) {
        if (!this.dotsWrap || this.multi) {
            return;
        }
        var html = '';
        for (var i = 0; i < carouselCount; i++) {
            if (i == 0) {
                html += '<div class="' + this.dotClassName + ' ' + this.activeClassName + '"></div>';
            } else {
                html += '<div class="' + this.dotClassName + '"></div>';
            }
        }
        this.dotsWrap.innerHTML = html;
    }
    //激活当前锚点
    activeDot(num) {
        var offsetX = 0;
        if (!this.dotsWrap || this.multi) {
            return;
        }
        if (!num && num != 0) {
            if (this.usePosition) {
                offsetX = this._getComputedStyle('left');
                offsetX ? offsetX = Number(offsetX.replace('px', '')) : offsetX = 0;
            } else {
                offsetX = this._getComputedTranslateX();
            }
            num = Math.floor((Math.abs(offsetX) + this.parentWidth / 2) / this.parentWidth);
        }
        var dom = this.dotsWrap.getElementsByClassName(this.activeClassName)[0];
        if (dom) {
            dom.className = this.dotClassName;
        }
        //防止当前容器删除后报错
        if (this.dotsWrap.getElementsByClassName(this.dotClassName)[num]) {
            this.dotsWrap.getElementsByClassName(this.dotClassName)[num].className = this.dotClassName + ' ' + this.activeClassName;
        }
    }
    //绑定锚点点击事件
    bindDotClickEvent() {
        if (!this.dotsWrap || this.multi) {
            return;
        }
        var self = this;
        var dots = this.dotsWrap.getElementsByClassName(this.dotClassName);
        var length = dots.length;
        for (var i = 0; i < length; i++) {
            (function (num) {
                self._bindClickEvent(dots[num], function (event) {
                    self._stopPropagation(event);
                    self.goToNoTrans(num);
                });
            })(i);
        }
    }
    //绑定前后切换事件
    bindArrowClickEvent() {
        var self = this;
        var offsetX = 0;
        if (this.leftArrow) {
            this._bindClickEvent(this.leftArrow, function (event) {
                self._stopPropagation(event);
                if (self.carouselCount < self.maxCount) {
                    _stop();
                    self.toLeft();
                }
            });
        }
        if (this.rightArrow) {
            this._bindClickEvent(this.rightArrow, function (event) {
                self._stopPropagation(event);
                if (self.carouselCount > 0) {
                    _stop();
                    self.toRight();
                }
            });
        }

        function _stop() {
            self._clearAllTimeoutId();
            if (!self.usePosition) {
                self.wrap.style[self.prefixStyle.transitionDuration] = '0ms';
                var translateX = self._getComputedTranslateX();
                self.wrap.style[self.prefixStyle.transform] = 'translateX(' + translateX + 'px) translateZ(0)';
            } else {
                self.wrap.style[self.prefixStyle.transitionDuration] = '0ms';
                var left = self._getComputedStyle('left');
                left ? left = Number(left.replace('px', '')) : left = 0;
                self.wrap.style.left = left + 'px';
            }
        }
    }
    //绑定触屏事件
    bindTouchEvent() {
        var self = this;
        var startX = 0;
        var translateX = 0;
        var left = 0;
        this._addEvent(this.container, 'touchstart', function (event) {
            self._clearAllTimeoutId();
            self.bannerClick = false;
            startX = event.touches[0].pageX;
            if (!self.usePosition) {
                self.wrap.style[self.prefixStyle.transitionDuration] = '0ms';
                translateX = self._getComputedTranslateX();
                self.wrap.style[self.prefixStyle.transform] = 'translateX(' + translateX + 'px) translateZ(0)';
            } else {
                self.wrap.style[self.prefixStyle.transitionDuration] = '0ms';
                left = self._getComputedStyle('left');
                left ? left = Number(left.replace('px', '')) : left = 0;
                wrap.style.left = left + 'px';
            }
        });
        this._addEvent(this.container, 'touchmove', function (event) {
            //防止ios下拉
            self._preventDefault(event);
            self._stopPropagation(event);
            var dtX = event.touches[0].pageX - startX;
            var _translateX = translateX + dtX > 0 ? 0 : translateX + dtX;
            var _left = left + dtX > 0 ? 0 : left + dtX;
            _translateX = _translateX < self.parentWidth - self.wrapWidth ? self.parentWidth - self.wrapWidth : _translateX;
            _left = _left < self.parentWidth - self.wrapWidth ? self.parentWidth - self.wrapWidth : _left;
            if (!self.usePosition) {
                self.wrap.style[self.prefixStyle.transform] = 'translateX(' + _translateX + 'px) translateZ(0)';
            } else {
                self.wrap.style.left = _left + 'px';
            }
        });
        this._addEvent(this.container, 'touchend', function (event) {
            if (!self.usePosition) {
                translateX = self._getComputedTranslateX();
                _next(translateX);
            } else {
                left = self._getComputedStyle('left');
                left ? left = Number(left.replace('px', '')) : left = 0;
                _next(left);
            }

            function _next(offsetX) {
                var now = new Date().getTime();
                //如果只是点击，则继续执行未完成的过渡
                if (Math.abs(event.changedTouches[0].pageX - startX) < 5) {
                    self.bannerClick = true;
                    if (self.carouselCount == 0) {
                        self.direct = 'left';
                    } else if (self.carouselCount == self.maxCount) {
                        self.direct = 'right';
                    }

                    if (self.anicomplete) {
                        //过渡动画已经完成，延迟后继续下一个轮播
                        self.loopTimer = setTimeout(function () {
                            if (self.direct == 'left') self.toLeft();else self.toRight();
                        }, self.stay - (now - self.transEndTime));
                    } else {
                        //过渡动画未完成，继续下一个轮播
                        if (self.direct == 'left') self.toLeft();else self.toRight();
                    }
                    return;
                }
                self.anicomplete = false;
                if (event.changedTouches[0].pageX > startX) {
                    //向右轮播
                    //跟新carouselCount
                    self.carouselCount = Math.ceil(Math.abs(offsetX / self.parentWidth));
                    if (self.carouselCount == 0) {
                        //已到第一个，不可向右轮播了
                        self.goTo(0);
                        return;
                    }
                    self.toRight();
                } else {
                    //向左轮播
                    //跟新carouselCount
                    self.carouselCount = Math.floor(Math.abs(offsetX / self.parentWidth));
                    if (self.carouselCount == self.maxCount) {
                        //已到最后一个，不可向左轮播了
                        self.goTo(self.maxCount);
                        return;
                    }
                    self.toLeft();
                }
            }
        });
    }
    /**
     * 根据index切换到
     * @param  {Numbe} num 轮播项目索引
     */
    goTo(num) {
        var translateX = num * parentWidth;
        this.anicomplete = false;
        this._translateX(translateX);
    }
    /**
     * 根据index切换到(无过渡效果)
     * @param  {Numbe} num 轮播项目索引
     */
    goToNoTrans(num) {
        var translateX = -num * this.parentWidth;
        this._clearAllTimeoutId();
        if (!this.usePosition) {
            this.wrap.style[this.prefixStyle.transitionDuration] = '0ms';
            this.wrap.style[this.prefixStyle.transform] = 'translateX(' + translateX + 'px) translateZ(0)';
        } else {
            this.wrap.style.left = translateX + 'px';
        }
        this.carouselCount = num;
        this.transEnd();
        this.activeDot(num);
    }
    //向左切换
    toLeft() {
        if (this.carouselCount >= this.maxCount) {
            this.transEnd();
            return;
        };
        var translateX = 0;
        var style = null;
        var startX = 0;
        var time = 0;
        var left = 0;

        this._clearAllTimeoutId();
        this.anicomplete = false;
        this.carouselCount++;

        if (this.carouselCount == this.maxCount && this.multi) {
            translateX = this.wrapWidth - this.parentWidth;
        } else {
            translateX = this.parentWidth * this.carouselCount;
        }

        this._translateX(translateX);
    }
    //向右切换
    toRight() {
        if (this.carouselCount <= 0) {
            this.transEnd();
            return;
        }
        var translateX = 0;
        var style = null;
        var time = 0;
        var left = 0;
        var die = this.wrapWidth % this.parentWidth;
        var balance = 0;
        //使向右轮播时时，第一个项目的滚动距离为 parentWidth
        if (die && this.multi) {
            balance = this.parentWidth - die;
        }
        this._clearAllTimeoutId();
        this.anicomplete = false;
        this.carouselCount--;
        translateX = this.parentWidth * this.carouselCount - balance;
        if (translateX < 0) {
            translateX = 0;
        }
        this._translateX(translateX);
    }
    //过渡完成回调
    transEnd() {
        //如果容器已被删除，停止轮播
        if (!this.wrap.isConnected) {
            this._clearAllTimeoutId();
            return;
        }
        var self = this;
        var dom = null;
        var offsetX = 0;

        this.transEndTime = new Date().getTime();
        this.activeDot(this.carouselCount);
        if (this.carouselCount == 0) {
            this.direct = 'left';
        } else if (this.carouselCount == this.maxCount) {
            this.direct = 'right';
        }
        this._clearAllTimeoutId();
        if (this.usePosition) {
            offsetX = this._getComputedStyle('left');
            offsetX ? offsetX = Number(offsetX.replace('px', '')) : offsetX = 0;
        } else {
            offsetX = this._getComputedTranslateX();
        }

        if (this.preTranslateX != Math.abs(offsetX)) {
            //过渡动画未完成
            if (!this.usePosition) {
                this.wrap.style[this.prefixStyle.transitionDuration] = '0ms';
                this.wrap.style[this.prefixStyle.transform] = 'translateX(' + offsetX + 'px) translateZ(0)';
            } else {
                this.wrap.style[this.prefixStyle.transitionDuration] = '0ms';
                this.wrap.style.left = offsetX + 'px';
            }
            if (this.carouselCount == this.maxCount && this.multi) {
                this._translateX(this.wrapWidth - this.parentWidth);
            } else {
                this._translateX(this.carouselCount * this.parentWidth);
            }
        } else {
            //过渡动画已完成
            this.anicomplete = true;
            this.loopTimer = setTimeout(function () {
                if (self.anicomplete) {
                    if (self.direct == 'left') self.toLeft();else self.toRight();
                }
            }, this.stay);
        }
    }
    //跟踪transtion过渡
    _startTransition() {
        var rAF = this._getRAF();
        var self = this;
        rAF(translate);

        function translate() {
            self.rAFTrackTimer = rAF(function () {
                translate();
                self.activeDot();
            });
        }
    }
    //定位实现切换
    _position(dom, offsetX, duration) {
        var self = this;
        var rAF = this._getRAF();
        var startX = 0;
        var dtX = 0;
        var left = 0;
        var sign = 1;
        var now = new Date().getTime();
        startX = self._getComputedStyle('left');
        startX ? startX = Number(startX.replace('px', '')) : startX = 0;
        dtX = 1000 / 60 / duration * (offsetX - startX);
        rAF(translate);

        function translate() {
            self.rAFPosTimer = rAF(function () {
                left = self.wrap.style.left;
                left ? left = Number(left.replace('px', '')) : left = 0;
                left > 0 && (left = 0);
                if (Math.abs(offsetX - left) > Math.abs(dtX)) {
                    left += dtX;
                    dom.style.left = left + 'px';
                    translate();
                    self.activeDot();
                } else {
                    dom.style.left = offsetX + 'px';
                    self.transEnd();
                }
            });
        }
    }
    //x轴平移
    _translateX(translateX) {
        var self = this;
        if (this.useTransition) {
            var time = this.duration * (Math.ceil(Math.abs(-translateX - this._getComputedTranslateX())) / this.parentWidth);
            time = time > this.duration ? this.duration : time;
            this.wrap.style[this.prefixStyle.transitionDuration] = time + 'ms';
            this.wrap.style[this.prefixStyle.transform] = 'translateX(-' + translateX + 'px) translateZ(0)';
            self._startTransition();
            //防止transitionend不响应
            this.transTimer = setTimeout(function () {
                self.transEnd();
            }, this.duration + 100);
        } else {
            var left = this.wrap.style.left;
            left ? left = Number(left.replace('px', '')) : left = 0;
            time = this.duration * (Math.ceil(Math.abs(-translateX - left)) / this.parentWidth);
            time = time > this.duration ? this.duration : time;
            this.wrap.style[this.prefixStyle.transitionDuration] = '0ms';
            this._position(this.wrap, -translateX, time);
        }
        this.preTranslateX = translateX;
    }
    _clearAllTimeoutId() {
        var cancelRAF = this._getCancelRAF();
        cancelRAF(this.rAFTrackTimer);
        cancelRAF(this.rAFPosTimer);
        clearTimeout(this.loopTimer);
        clearTimeout(this.transTimer);
    }
    //兼容ios冒泡,banner.click 阻止默认事件后，将不会触发子元素的点击
    _bindClickEvent(dom, fn) {
        var self = this;
        this._addEvent(dom, 'touchstart', function (event) {
            self._stopPropagation(event);
        });
        this._addEvent(dom, 'touchmove', function (event) {
            self._preventDefault(event);
            self._stopPropagation(event);
        });
        this._addEvent(dom, 'touchend', function (event) {
            self._stopPropagation(event);
        });
        this._addEvent(dom, 'click', fn);
    }
    _addEvent(ele, event_name, func) {
        if (window.attachEvent) {
            ele.attachEvent('on' + event_name, func);
        } else {
            ele.addEventListener(event_name, func, false); //默认事件是冒泡
        }
    }
    _stopPropagation(e) {
        if (e && e.stopPropagation) {
            //非IE   
            e.stopPropagation();
        } else {
            //IE   
            window.event.cancelBubble = true;
        }
    }
    _preventDefault(e) {
        e.preventDefault ? e.preventDefault() : e.returnValue = false;
    }
    //获取css前缀
    _getPrefixStyle() {
        var _elementStyle = document.createElement('div').style;

        var _vendor = function () {
            var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
                transform,
                i = 0,
                l = vendors.length;
            for (; i < l; i++) {
                transform = vendors[i] + 'ransform';
                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
            }
            return false;
        }();

        function _prefixStyle(style) {
            if (_vendor === false) return false;
            if (_vendor === '') return style;
            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        }

        var _transform = _prefixStyle('transform');
        var style = {
            transform: _transform,
            transitionProperty: _prefixStyle('transitionProperty'),
            transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
            transitionDuration: _prefixStyle('transitionDuration'),
            transitionDelay: _prefixStyle('transitionDelay'),
            transformOrigin: _prefixStyle('transformOrigin')
        };
        return style;
    }
    //获取计算后的translateX
    _getComputedTranslateX() {
        var startX = 0;
        var style = window.getComputedStyle ? window.getComputedStyle(this.wrap, null) : null || this.wrap.currentStyle;
        var matrix = style[this.prefixStyle.transform];
        if (matrix != 'none') {
            startX = Number(matrix.replace(/matrix\(|\)/g, '').split(',')[4]);
        }
        return startX;
    }
    //获取计算后的样式属性值
    _getComputedStyle(property) {
        var style = window.getComputedStyle ? window.getComputedStyle(this.wrap, null) : null || this.wrap.currentStyle;
        return style[property];
    }
    //获取requestAnimationFrame帧函数
    _getRAF() {
        var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
        var cancelRAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;
        if (rAF && cancelRAF) {
            return rAF;
        } else {
            return function (callback) {
                window.setTimeout(callback, 1000 / 60);
            };
        }
    }
    //获取cancelAnimationFrame取消帧函数
    _getCancelRAF() {
        var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
        var cancelRAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;
        if (rAF && cancelRAF) {
            return cancelRAF;
        } else {
            return clearTimeout;
        }
    }
}

/* harmony default export */ __webpack_exports__["a"] = (Carousel);

/***/ }),
/* 1 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(3);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {
		return null;
	}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 3 */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__carousel__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mobile_css__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mobile_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__mobile_css__);



window.onload = function () {
	new __WEBPACK_IMPORTED_MODULE_0__carousel__["a" /* default */]({
		leftArrow: document.querySelector('.d1 .left'),
		rightArrow: document.querySelector('.d1 .right'),
		container: document.querySelector('.d1 .carousel'),
		wrap: document.querySelector('.d1 .wrap'),
		dotsWrap: document.querySelector('.d1 .dots'),
		dotClassName: 'dot',
		activeClassName: 'active'
	});
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(9);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(2)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../../node_modules/_css-loader@1.0.0@css-loader/index.js!./mobile.css", function() {
		var newContent = require("!!../../node_modules/_css-loader@1.0.0@css-loader/index.js!./mobile.css");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(1)(false);
// imports


// module
exports.push([module.i, "body{\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n.out {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 200px;\r\n}\r\n.carousel{\r\n    height: 100%;\r\n}\r\n.wrap{\r\n    font-size: 0;\r\n    white-space: nowrap;\r\n}\r\n.wrap img{\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n/*DOT-BEGIN*/\r\n.dots{\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: 15px;\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 10px;\r\n}\r\n.dot{\r\n    width: 10px;\r\n    height: 10px;\r\n    margin: 0 2px;\r\n    border: 1px solid #fff;\r\n    border-radius: 50%;\r\n    background: rgba(255,255,255,.3);\r\n}\r\n.dot.active{\r\n    background: rgba(255,255,255,1);\r\n}\r\n/*DOT-END*/\r\n\r\n/*ARROW-BEGIN*/\r\n.left,\r\n.right{\r\n    position: absolute;\r\n    top: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-top: -10px;\r\n    cursor: pointer;\r\n    border: 1px solid #ddd;\r\n    border-radius: 50%;\r\n    background-color: rgba(255,255,255,.2);\r\n}\r\n.left:hover,\r\n.right:hover{\r\n    background-color: rgba(255,255,255,.5);\r\n}\r\n.left{\r\n    left: 10px;\r\n}\r\n.left:after{\r\n    display: block;\r\n    width: 6px;\r\n    height: 6px;\r\n    margin: 5px 0 0 7px;\r\n    content: '';\r\n    transform: rotateZ(-135deg);\r\n    border: 3px solid #fff;\r\n    border-width: 3px 3px 0 0;\r\n}\r\n.right{\r\n    right: 10px;\r\n}\r\n.right:after{\r\n    display: block;\r\n    width: 6px;\r\n    height: 6px;\r\n    margin: 5px 0 0 4px;\r\n    content: '';\r\n    transform: rotateZ(45deg);\r\n    border: 3px solid #fff;\r\n    border-width: 3px 3px 0 0;\r\n}\r\n/*ARROW-END*/\r\n\r\n.param{\r\n    text-align: center;\r\n    color: rgb(0,116,0);\r\n}\r\n", ""]);

// exports


/***/ })
/******/ ]);
//# sourceMappingURL=mobile.min.js.map